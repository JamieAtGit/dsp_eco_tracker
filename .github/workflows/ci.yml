name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

env:
  PYTHON_VERSION: '3.13'
  COVERAGE_THRESHOLD: 80

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r backend/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 backend/ enhanced_scraper_fix.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ enhanced_scraper_fix.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff backend/ enhanced_scraper_fix.py
    
    - name: Import sorting check
      run: |
        isort --check-only --diff backend/ enhanced_scraper_fix.py
    
    - name: Type checking with mypy
      run: |
        mypy backend/ enhanced_scraper_fix.py --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow failures for now during development

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security scan with bandit
      run: |
        bandit -r backend/ enhanced_scraper_fix.py -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r backend/requirements.txt
    
    - name: Run tests with coverage
      run: |
        python -m pytest backend/tests/${{ matrix.test-type }}/ \
          --cov=backend \
          --cov=enhanced_scraper_fix \
          --cov-report=xml:coverage-${{ matrix.test-type }}.xml \
          --cov-report=html:htmlcov-${{ matrix.test-type }} \
          --junit-xml=junit-${{ matrix.test-type }}.xml \
          --json-report --json-report-file=report-${{ matrix.test-type }}.json \
          -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: coverage-${{ matrix.test-type }}.xml
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-coverage
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          junit-${{ matrix.test-type }}.xml
          report-${{ matrix.test-type }}.json
          htmlcov-${{ matrix.test-type }}/

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -r backend/requirements.txt
    
    - name: Run performance tests
      run: |
        python -m pytest backend/tests/ -m "not slow" \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          --benchmark-sort=mean
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/website
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/website/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
    
    - name: Build application
      run: npm run build
    
    - name: Run tests
      run: npm test
      continue-on-error: true

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        pip install -r backend/requirements.txt
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  # Deployment (staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "This would deploy to a staging server"
    
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests against staging"
        echo "This would run basic health checks"

  # Deployment (production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "This would deploy to production server"
    
    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment verification"
        echo "This would verify production deployment"

  # Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
    
    - name: Generate combined coverage report
      run: |
        echo "📊 Combined Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "=========================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit      | 16%      |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | TBD     |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Target Coverage: 80%**" >> $GITHUB_STEP_SUMMARY
        echo "📈 **Current Progress: 16%**" >> $GITHUB_STEP_SUMMARY

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, security, test, frontend-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ contains(needs.*.result, 'success') }}
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "📊 Test results: ${{ needs.test.result }}"
        echo "🔍 Quality checks: ${{ needs.quality.result }}"
        echo "🛡️  Security scan: ${{ needs.security.result }}"
    
    - name: Notify on failure
      if: ${{ contains(needs.*.result, 'failure') }}
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "📊 Test results: ${{ needs.test.result }}"
        echo "🔍 Quality checks: ${{ needs.quality.result }}"
        echo "🛡️  Security scan: ${{ needs.security.result }}"