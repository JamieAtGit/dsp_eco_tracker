[tool:pytest]
# Pytest configuration for DSP Eco Tracker

# Test discovery
testpaths = backend/tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --cov=backend
    --cov=enhanced_scraper_fix
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10

# Markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for API endpoints
    e2e: End-to-end tests for complete workflows
    slow: Tests that take longer than 5 seconds
    network: Tests that require network access
    ml: Tests related to machine learning models
    scraping: Tests related to web scraping functionality

# Warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    error::pytest.PytestUnraisableExceptionWarning

# Minimum version
minversion = 6.0

# Test session options
junit_family = xunit2
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage options
[coverage:run]
source = backend/, enhanced_scraper_fix.py
omit = 
    */tests/*
    */venv/*
    */.venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */node_modules/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
precision = 2
fail_under = 80

[coverage:html]
directory = htmlcov
title = DSP Eco Tracker Test Coverage Report