#!/usr/bin/env python3
# Initialize enterprise components for testing

import sys
import os
sys.path.insert(0, os.path.abspath('.'))

def initialize_components():
    """Initialize all enterprise components"""
    
    print("üöÄ Initializing enterprise components...")
    
    # Initialize error handling
    try:
        from backend.core.exceptions import error_handler
        print("‚úÖ Error handling framework initialized")
    except ImportError as e:
        print(f"‚ùå Error handling import failed: {e}")
    
    # Initialize monitoring
    try:
        from backend.core.monitoring import monitoring
        print("‚úÖ Monitoring system initialized")
    except ImportError as e:
        print(f"‚ùå Monitoring import failed: {e}")
    
    # Initialize caching
    try:
        from backend.core.caching import cache
        print("‚úÖ Caching system initialized")
    except ImportError as e:
        print(f"‚ùå Caching import failed: {e}")
    
    # Initialize rate limiting
    try:
        from backend.core.rate_limiting import rate_limit_service
        print("‚úÖ Rate limiting initialized")
    except ImportError as e:
        print(f"‚ùå Rate limiting import failed: {e}")
    
    # Initialize API docs
    try:
        from backend.core.api_documentation import api_docs
        print("‚úÖ API documentation initialized")
    except ImportError as e:
        print(f"‚ùå API documentation import failed: {e}")
    
    # Initialize ML monitoring
    try:
        from backend.core.ml_monitoring import ml_monitoring
        print("‚úÖ ML monitoring initialized")
    except ImportError as e:
        print(f"‚ùå ML monitoring import failed: {e}")
    
    print("üéØ Component initialization complete!")

if __name__ == "__main__":
    initialize_components()
